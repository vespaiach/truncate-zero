{"version":3,"file":"truncate-zero.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * Default rounding function.\n */\nfunction _round(num: number) {\n  return parseInt(num.toFixed(0));\n}\n\n/**\n * Format a number as short string by truncating ending zeros: 1k, 2.2k, -45.1m...\n * @param num Number to be formatted\n * @param options (optional) input suffixes: k, m, b, t and the rounding function\n */\nexport default function truncateZero(\n  num: number,\n  options?: {\n    thousand?: string;\n    million?: string;\n    billion?: string;\n    trillion?: string;\n    round?: (n: number) => number;\n  }\n): string {\n  const absNum = Math.abs(num);\n  const opts = Object.assign(\n    {},\n    {\n      thousand: 'k',\n      million: 'm',\n      billion: 'b',\n      trillion: 't',\n      round: _round,\n    },\n    options || {}\n  );\n  const { round = _round, thousand, million, billion, trillion } = opts;\n\n  if (absNum <= 999) {\n    return String(round(num));\n  } else if (absNum <= 999999) {\n    return `${round(num) / 1000}${thousand}`;\n  } else if (absNum <= 999999999) {\n    return `${round(num) / 1000000}${million}`;\n  } else if (absNum <= 999999999999) {\n    return `${round(num) / 1000000000}${billion}`;\n  } else {\n    return `${round(num) / 1000000000000}${trillion}`;\n  }\n}\n"],"names":["_round","num","parseInt","toFixed","options","absNum","Math","abs","opts","Object","assign","thousand","million","billion","trillion","round","String"],"mappings":"aAGA,SAASA,EAAOC,UACPC,SAASD,EAAIE,QAAQ,oFAS5BF,EACAG,OAQMC,EAASC,KAAKC,IAAIN,GAClBO,EAAOC,OAAOC,OAClB,GACA,CACEC,SAAU,IACVC,QAAS,IACTC,QAAS,IACTC,SAAU,IACVC,MAAOf,GAETI,GAAW,MAEoDI,EAAzDO,MAAAA,aAAQf,IAAQW,EAAyCH,EAAzCG,SAAUC,EAA+BJ,EAA/BI,QAASC,EAAsBL,EAAtBK,QAASC,EAAaN,EAAbM,gBAEhDT,GAAU,IACLW,OAAOD,EAAMd,IACXI,GAAU,UACTU,EAAMd,GAAO,IAAOU,EACrBN,GAAU,aACTU,EAAMd,GAAO,IAAUW,EACxBP,GAAU,gBACTU,EAAMd,GAAO,IAAaY,KAE1BE,EAAMd,GAAO,KAAgBa"}